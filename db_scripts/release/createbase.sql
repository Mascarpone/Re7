-- MySQL Script generated by MySQL Workbench
-- lun. 09 nov. 2015 21:58:19 CET
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema re7
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS re7 DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci ;
USE re7 ;


-- -----------------------------------------------------
-- Table re7.User
-- -----------------------------------------------------
DROP TABLE IF EXISTS re7.User ;

CREATE TABLE IF NOT EXISTS re7.User (
  userID INT NOT NULL AUTO_INCREMENT,
  login VARCHAR(45) NOT NULL,
  password VARCHAR(45) NOT NULL,
  PRIMARY KEY (userID) );


-- -----------------------------------------------------
-- Table re7.Category
-- -----------------------------------------------------
DROP TABLE IF EXISTS re7.Category ;

CREATE TABLE IF NOT EXISTS re7.Category (
  categoryID INT NOT NULL AUTO_INCREMENT,
  categoryName VARCHAR(45) NOT NULL,
  PRIMARY KEY (categoryID) );


-- -----------------------------------------------------
-- Table re7.Recipe
-- -----------------------------------------------------
DROP TABLE IF EXISTS re7.Recipe ;

CREATE TABLE IF NOT EXISTS re7.Recipe (
  recipeID INT NOT NULL AUTO_INCREMENT,
  recipeName VARCHAR(45) NOT NULL,
  image VARCHAR(60) NOT NULL,
  numberPerson INT(3),
  budget INT(3) NOT NULL,
  difficulty INT(1) NOT NULL,
  preparationTime INT NOT NULL,
  cookingTime INT NOT NULL,
  userID INT NOT NULL,
  categoryID INT NOT NULL,
  PRIMARY KEY (recipeID) ,
  INDEX fk_Recipe_User_idx (userID ASC) ,
  INDEX fk_Recipe_Category1_idx (categoryID ASC) ,
  CONSTRAINT fk_Recipe_User
    FOREIGN KEY (userID)
    REFERENCES re7.User (userID),
  CONSTRAINT fk_Recipe_Category1
    FOREIGN KEY (categoryID)
    REFERENCES re7.Category (categoryID));


-- -----------------------------------------------------
-- Table re7.Comment
-- -----------------------------------------------------
DROP TABLE IF EXISTS re7.Comment ;

CREATE TABLE IF NOT EXISTS re7.Comment (
  commentID INT NOT NULL AUTO_INCREMENT,
  comment VARCHAR(300) NULL,
  tasteScore INT(1) NOT NULL,
  priceScore INT(1) NOT NULL,
  instructionScore INT(1) NOT NULL,
  commentDate TIMESTAMP NOT NULL,
  userID INT NOT NULL,
  recipeID INT NOT NULL,
  PRIMARY KEY (commentID) ,
  INDEX fk_Comment_User1_idx (userID ASC) ,
  INDEX fk_Comment_Recipe1_idx (recipeID ASC) ,
  CONSTRAINT fk_Comment_User1
    FOREIGN KEY (userID)
    REFERENCES re7.User (userID),
  CONSTRAINT fk_Comment_Recipe1
    FOREIGN KEY (recipeID)
    REFERENCES re7.Recipe (recipeID));


-- -----------------------------------------------------
-- Table re7.Step
-- -----------------------------------------------------
DROP TABLE IF EXISTS re7.Step ;

CREATE TABLE IF NOT EXISTS re7.Step (
  stepID INT NOT NULL AUTO_INCREMENT,
  stepCount INT NOT NULL,
  stepDescription VARCHAR(300) NOT NULL,
  recipeID INT NOT NULL,
  PRIMARY KEY (stepID) ,
  INDEX fk_Step_Recipe1_idx (recipeID ASC) ,
  CONSTRAINT fk_Step_Recipe1
    FOREIGN KEY (recipeID)
    REFERENCES re7.Recipe (recipeID));


-- -----------------------------------------------------
-- Table re7.Unit
-- -----------------------------------------------------
DROP TABLE IF EXISTS re7.Unit ;

CREATE TABLE IF NOT EXISTS re7.Unit (
  unitID INT NOT NULL AUTO_INCREMENT,
  unitName VARCHAR(45) NOT NULL,
  PRIMARY KEY (unitID) );


-- -----------------------------------------------------
-- Table re7.Ingredient
-- -----------------------------------------------------
DROP TABLE IF EXISTS re7.Ingredient ;

CREATE TABLE IF NOT EXISTS re7.Ingredient (
  ingredientID INT NOT NULL AUTO_INCREMENT,
  ingredientName VARCHAR(45) NOT NULL,
  PRIMARY KEY (ingredientID));


-- -----------------------------------------------------
-- Table re7.Contain
-- -----------------------------------------------------
DROP TABLE IF EXISTS re7.Contain ;

CREATE TABLE IF NOT EXISTS re7.Contain (
  recipeID INT NOT NULL,
  ingredientID INT NOT NULL,
  quantity FLOAT NOT NULL,
  isMain TINYINT(1) NOT NULL,
  unitID INT NOT NULL,
  PRIMARY KEY (recipeID, ingredientID, unitID) ,
  INDEX fk_Recipe_has_Ingredient_Ingredient1_idx (ingredientID ASC) ,
  INDEX fk_Recipe_has_Ingredient_Recipe1_idx (recipeID ASC) ,
  INDEX fk_Contain_Unit1_idx (unitID ASC) ,
  CONSTRAINT fk_Recipe_has_Ingredient_Recipe1
    FOREIGN KEY (recipeID)
    REFERENCES re7.Recipe (recipeID),
  CONSTRAINT fk_Recipe_has_Ingredient_Ingredient1
    FOREIGN KEY (ingredientID)
    REFERENCES re7.Ingredient (ingredientID),
  CONSTRAINT fk_Contain_Unit1
    FOREIGN KEY (unitID)
    REFERENCES re7.Unit (unitID));


-- -----------------------------------------------------
-- View re7.Contain
-- -----------------------------------------------------
DROP VIEW IF EXISTS Average;
CREATE VIEW Average AS
SELECT recipeID, (AVG(tasteScore)+AVG(priceScore)+AVG(instructionScore))/3 AS averageScore, AVG(tasteScore) AS tasteAvgScore, AVG(priceScore) AS priceAvgScore, AVG(instructionScore) AS instructionAvgScore
FROM Comment
GROUP BY recipeID;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
